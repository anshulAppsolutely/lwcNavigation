/**
 * this class is used to create Community user for a person account
 * default scope of a batch is 200
 */
public class CreateCommunityUserBatch implements Database.Batchable<SObject>, Database.Stateful  {

    String queryString='';
    Integer limitFilter;
    Id profileId = [Select Id from Profile where Name = :'MijnStadlander huurder' limit 1].id;
    Id roleId = [Select Id from UserRole where Name = :'DigiAdm Klant Persoonsaccount' limit 1].Id;
    Id templateIdNewUser = [ select Id from EmailTemplate where DeveloperName ='Onboarding_bestaande_huurder'].Id;
    Integer count = 0;
    Exception[] errors = new Exception[0];
    Set<Id> successfulAccountIds = new Set<Id>();
    //String accountid ='0012400000zVm0UAAS';
	
    public CreateCommunityUserBatch(String query){
        this.queryString=query;
    }

    public CreateCommunityUserBatch(String query, Integer limitFilter){
        this.queryString=query;
        this.limitFilter = 1;
    }

    public Database.QueryLocator start(Database.BatchableContext BC) {
        // collect the batches of records or objects to be passed to execute
        if(String.isBlank(queryString)) {
            String queryFilter = 'WHERE Id =: accountid AND IsPersonAccount=true AND Nieuwe_Mijnstadlander__c = true AND PersonContactId NOT IN (SELECT ContactId FROM User) order by InlogMijnStadlander__c desc';
            if(limitFilter!=null && limitFilter > 0){
                queryFilter += ' limit '+limitFilter;
            }
            queryString = 'SELECT Id ,Owner.userRole.Name, (SELECT Id,Name,FirstName,LastName,Email,AccountId FROM Contacts) ' +
                    'FROM Account '+queryFilter;
           
        }
        System.debug('query >>'+queryString);
        return Database.getQueryLocator(queryString);
    }

    public void execute(Database.BatchableContext BC, List<Account> accList) {

        system.debug('accList size >>'+accList.size()+'profileId >>'+profileId);
        List<User> usersToCreate = new List<User>();
        List<Contact> contactsToBeCreated = new List<Contact>();
        if(accList.size() > 0) {
            try {
            	for(Account account : accList){
                	if(account.Owner.userRole!=null) contactsToBeCreated.addAll(account.Contacts);  
            	}
            	system.debug('contactsToBeCreated size >>'+contactsToBeCreated.size());
            	count +=contactsToBeCreated.size();
                for (Contact con : contactsToBeCreated) {
                    system.debug('con >>'+con);
            		User newUser = new User();
            		newUser.FirstName = con.FirstName;
            		newUser.LastName = con.LastName;
            		newUser.EmailEncodingKey = 'ISO-8859-1';
            		newUser.TimeZoneSidKey = 'Europe/London';
            		newUser.LocaleSidKey = 'nl_NL';
            		newUser.LanguageLocaleKey = 'nl_NL';
            		newUser.Username = con.Email ;
            		newUser.Email = con.Email ;
            		newUser.ProfileID = profileId;
            		newUser.ContactId = con.Id;
                    String alias = '';
                    if(con.FirstName!=null) alias = con.FirstName.substring(0,2);
            		newUser.Alias = alias + con.LastName.substring(0,2);
            		newuser.CommunityNickname = con.LastName;
            		usersToCreate.add(newUser);
            	}
                
                Database.SaveResult[] srList = Database.insert(usersToCreate, false);
                for (Database.SaveResult sr : srList) {
   					if (sr.isSuccess()) {
      					// This condition will be executed for successful records and will fetch the ids of successful records
      					System.debug('Successfully inserted Users. User ID: ' + sr.getId());
						successfulAccountIds.add(sr.getId());
   					} else {
      					// This condition will be executed for failed records
      					for(Database.Error objErr : sr.getErrors()) {
         					System.debug('The following error has occurred.');
							// Printing error message in Debug log
         					System.debug(objErr.getStatusCode() + ': ' + objErr.getMessage());
         					System.debug('User oject field which are affected by the error:' + objErr.getFields());
      					}
   					}
				}
                
            } catch (Exception e) {
                errors.add(e);
            }
        }
    }

    public void finish(Database.BatchableContext BC) {
        system.debug('count size >>'+count+' user id created >>'+successfulAccountIds);
      /*  Map<Id, User> userMap = new Map<Id,User>([SELECT Id,ContactId,Name,Email FROM User WHERE Id IN :successfulAccountIds]);
        List<Messaging.SingleEmailMessage> allmsg = new List<Messaging.SingleEmailMessage>();
        for(Id usr : userMap.keyset())
		{
			Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
			mail.setTemplateID(templateIdNewUser);
			mail.setTargetObjectId(usr);
			mail.setSaveAsActivity(false);
			allmsg.add(mail);
		}
        // execute any post-processing operations like error handling
        system.debug('sending email');
        Messaging.sendEmail(allmsg,false); */
    }
}